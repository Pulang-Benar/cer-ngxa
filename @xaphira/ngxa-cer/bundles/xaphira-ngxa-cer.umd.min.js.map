{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@xaphira/ngxa-cer/lib/storage/panic-indexeddb.service.ts","ng://@xaphira/ngxa-cer/lib/services/panic.service.ts","ng://@xaphira/ngxa-cer/lib/ngxa-cer.module.ts","ng://@xaphira/ngxa-cer/lib/dashboard/ngxa-dashboard.component.ts","ng://@xaphira/ngxa-cer/lib/dashboard/monitoring/ngxa-cer-monitoring-page.component.ts","ng://@xaphira/ngxa-cer/lib/dashboard/monitoring/preview/ngxa-cer-monitoring-preview.component.ts","ng://@xaphira/ngxa-cer/lib/dashboard/monitoring/detail/prompt/ngxa-fake-report-prompt.component.ts","ng://@xaphira/ngxa-cer/lib/dashboard/monitoring/detail/ngxa-cer-monitoring-detail.component.ts","ng://@xaphira/ngxa-cer/lib/dashboard/ngxa-cer-dashboard-routing.module.ts","ng://@xaphira/ngxa-cer/lib/dashboard/monitoring/slide-out/ngxa-cer-slide-out.component.ts","ng://@xaphira/ngxa-cer/lib/dashboard/monitoring/info/ngxa-cer-monitoring-info.component.ts","ng://@xaphira/ngxa-cer/lib/dashboard/monitoring/detail/datatable/ngxa-cer-datatable.component.ts","ng://@xaphira/ngxa-cer/lib/dashboard/ngxa-cer-dashboard.module.ts","ng://@xaphira/ngxa-cer/lib/fake/ngxa-cer-fake.module.ts","ng://@xaphira/ngxa-cer/lib/reports/ngxa-cer-reports.component.ts","ng://@xaphira/ngxa-cer/lib/reports/services/reports-panic.service.ts","ng://@xaphira/ngxa-cer/lib/reports/emergency/list/ngxa-reports-emergency-list-page.component.ts","ng://@xaphira/ngxa-cer/lib/reports/emergency/detail/preview/ngxa-reports-preview.component.ts","ng://@xaphira/ngxa-cer/lib/reports/emergency/detail/prompt/ngxa-fake-prompt.component.ts","ng://@xaphira/ngxa-cer/lib/reports/emergency/detail/ngxa-reports-emergency-detail.component.ts","ng://@xaphira/ngxa-cer/lib/reports/fake/list/ngxa-reports-fake-list-page.component.ts","ng://@xaphira/ngxa-cer/lib/reports/ngxa-cer-reports-routing.module.ts","ng://@xaphira/ngxa-cer/lib/reports/ngxa-cer-reports.module.ts","ng://@xaphira/ngxa-cer/lib/statistics/ngxa-statistics.component.ts","ng://@xaphira/ngxa-cer/lib/statistics/area/ngxa-cer-statistics-area-page.component.ts","ng://@xaphira/ngxa-cer/lib/statistics/gender/ngxa-cer-statistics-gender-page.component.ts","ng://@xaphira/ngxa-cer/lib/statistics/periode/ngxa-cer-statistics-periode-page.component.ts","ng://@xaphira/ngxa-cer/lib/statistics/ngxa-cer-statistics-routing.module.ts","ng://@xaphira/ngxa-cer/lib/statistics/ngxa-cer-statistics.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","PanicIndexedDBService","injector","_super","tslib_1.__extends","Injectable","args","providedIn","Injector","IndexedDBService","PanicService","panicIndexedDB","loaderPanicSubject$","Subject","notifyPanic","data","_this","put","then","putAllPanic","datas","forEach","clearAllPanic","clearAll","getPanic","panicCode","get","getAllPanic","getAllOf","onCheckPanic","asObservable","Inject","PANIC_INDEXED_DB","CER_PROVIDERS","provide","useClass","PANIC","NgxaCerModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","exports","declarations","NgxaDashboardComponent","Component","selector","template","NgxaCerMonitoringPageComponent","panicService","showInfo","destroy$","http","HTTP_SERVICE","api","API","pipe","takeUntil","subscribe","getAllPanicStorage","ngOnInit","getAllPanicServer","ngOnDestroy","complete","HTTP_AUTH","values","temps","mark","title","alt","className","markers","onMarker","markerSelected","onToggleInfo","NgxaCerMonitoringPreviewComponent","apiPath","httpBaseService","sanitizer","getEvidence","checksum","user","fileType","tap","response","fileBlob","Blob","type","reader","FileReader","readAsDataURL","onloadend","url","bypassSecurityTrustUrl","result","toString","DomSanitizer","Input","NgxaFakeReportPromptComponent","ref","disabled","submit","password","close","NbDialogRef","NgxaCerMonitoringDetailComponent","router","route","dialogService","status","emergencyCategory","profile","imageDefault","document","getElementsByTagName","href","columns","name","prop","width","frozenLeft","button","buttonStatus","prefix","sort","desc","enc","EncryptionService","oauthResource","OAUTH_INFO","apiSelectParameter","snapshot","params","keyword","navigate","onInit","paramSelectStatus","key","paramSelectEmergency","serviceName","apiName","loadingForm","username","exec","success","image","err","toastr","showI18n","respStatusMessage","respStatusCode","valueSelect","formGroup","onPreview","open","context","onFake","onClose","disabledFake","encryptAES","onSubmit","ResponseCode","OK_SCR011","onProcess","OK_UPDATED","Router","ActivatedRoute","NbDialogService","BaseFilterComponent","routes","path","component","canActivateChild","AuthGuardChildService","children","code","NgxaCerDashboardRoutingModule","RouterModule","forChild","NgxaCerSlideOutComponent","onToggle","EventEmitter","toggleDetail","emit","Output","NgxaCerMonitoringInfoComponent","marker","defineProperty","onViewDetails","NgxaCerDatatableComponent","locale","layout","rows","filters","selected","limit","count","offset","externalPaging","externalSorting","loadingIndicator","scrollbarH","scrollbarV","reorderable","sortType","SortType","single","columnMode","ColumnMode","force","headerHeight","footerHeight","rowHeight","column","footer","startWithOpenData","filterEvent","buttonCell","select","activate","pageOffset","cdref","ChangeDetectorRef","keywordParam","_keyword","fetch","onChangeLayoutSize","datatable","recalculate","detectChanges","unsubscribe","getRequest","onSort","order","isArray","sorts","asc","onSelect","onActivate","event","selectionType","cellIndex","row","setPage","page","sanitizedValue","stripHtml","html","replace","onClickButton","body","map","Number","totalRecord","catchError","of","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","LOCALE_ID","LayoutService","ViewChild","static","components","modules","FormsModule","ReactiveFormsModule","NbCardModule","NbAlertModule","NbIconModule","NbDialogModule","NbWindowModule","NgxaThemeModule","NgxaInputModule","NgxaCheckBoxModule","NgxaButtonModule","NgxaBaseModule","NgxaSelectModule","NgxaMapsModule","NgxDatatableModule","NgxaTableModule","NgxaLabelModule","entryComponents","NgxaCerDashboardModule","NgxaCerFakeModule","NgxaCerReportsComponent","ReportsPanicService","getReports","reports","setReports","NgxaReportsEmergencyListPageComponent","reportService","fullname","phoneNumber","latestFormattedAddress","SelectionType","expanded","controlName","onViewDetail","NgxaReportsPreviewComponent","NgxaFakePromptComponent","NgxaReportsEmergencyDetailComponent","dataReport","NgxaReportsFakeListPageComponent","NgxaCerReportsRoutingModule","entry_components","NgxaCerReportsModule","NgxaStatisticsComponent","NgxaCerStatisticsAreaPageComponent","theme","options","year","Date","getFullYear","tempData","dataSelect","getStatistics","themeSubscription","axis","legend","series","dataSeries","barWidth","buildChart","getJsTheme","config","variables","echarts","backgroundColor","bg","tooltip","trigger","axisPointer","textStyle","color","textColor","grid","left","right","bottom","top","containLabel","xAxis","axisLine","lineStyle","axisLineColor","splitLine","splitLineColor","axisLabel","yAxis","axisTick","alignWithLabel","onSelectChange","random","Math","round","NbThemeService","NgxaCerStatisticsGenderPageComponent","console","log","radius","center","itemStyle","emphasis","shadowBlur","shadowOffsetX","shadowColor","itemHoverShadowColor","label","normal","labelLine","formatter","orient","calculable","NgxaCerStatisticsPeriodePageComponent","smooth","NgxaCerStatisticsRoutingModule","NgxaChartsModule","NgxaCerStatisticsModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\nimport { IndexedDBService } from '@xaphira/ngxa-storage';\nimport { IndexedDBFactoryService } from '@xaphira/shared';\nimport { PanicIDB } from '../models/panic.schema';\n\n@Injectable({providedIn : 'root'})\nexport class PanicIndexedDBService extends IndexedDBService<PanicIDB> implements IndexedDBFactoryService {\n\n  constructor(injector: Injector) {\n    super(injector, 'cer', 1, '#cer-panic');\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { PanicFactoryService, PANIC_INDEXED_DB, IndexedDBFactoryService } from '@xaphira/shared';\n\n@Injectable()\nexport class PanicService implements PanicFactoryService {\n\n    private loaderPanicSubject$ = new Subject<string>();\n\n    constructor(@Inject(PANIC_INDEXED_DB) private panicIndexedDB: IndexedDBFactoryService) {\n    }\n\n    public notifyPanic(data: any): void {\n        this.panicIndexedDB.put(data['panicCode'], data).then(() => {\n            this.loaderPanicSubject$.next(data['panicCode']);\n        });\n    }\n\n    public putAllPanic(datas: any[]): void {\n        datas.forEach(data => {\n            this.panicIndexedDB.put(data['panicCode'], data).then();\n        });\n    }\n\n    public clearAllPanic(): Promise<void> {\n        return this.panicIndexedDB.clearAll();\n    }\n\n    public getPanic(panicCode: string): Promise<any> {\n        return this.panicIndexedDB.get(panicCode);\n    }\n\n    public getAllPanic(): Observable<any[]> {\n        return this.panicIndexedDB.getAllOf();\n    }\n\n    public onCheckPanic(): Observable<string> {\n        return this.loaderPanicSubject$.asObservable();\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PANIC_INDEXED_DB, PANIC } from '@xaphira/shared';\nimport { PanicIndexedDBService } from './storage/panic-indexeddb.service';\nimport { PanicService } from './services/panic.service';\n\nconst CER_PROVIDERS = [\n  { provide: PANIC_INDEXED_DB, useClass: PanicIndexedDBService },\n  { provide: PANIC, useClass: PanicService },\n  PanicIndexedDBService,\n  PanicService,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  exports: [],\n  declarations: [],\n})\nexport class NgxaCerModule {\n\n  static forRoot(): ModuleWithProviders {\n    return <ModuleWithProviders>{\n      ngModule: NgxaCerModule,\n      providers: [\n        ...CER_PROVIDERS,\n      ],\n    };\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'xa-cer-dashboard',\n  template: `\n    <router-outlet></router-outlet>\n  `,\n})\nexport class NgxaDashboardComponent {\n}\n","import { Component, OnInit, OnDestroy, Inject, Injector } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { LeafletModel } from '@xaphira/ngxa-common';\nimport { PANIC, PanicFactoryService, HttpFactoryService, HTTP_SERVICE, API, APIModel } from '@xaphira/shared';\n\n@Component({\n  selector: 'xa-cer-monitoring',\n  styleUrls: ['./ngxa-cer-monitoring-page.component.scss'],\n  templateUrl: './ngxa-cer-monitoring-page.component.html',\n})\nexport class NgxaCerMonitoringPageComponent implements OnInit, OnDestroy {\n\n  public showInfo: boolean = false;\n  public markers: LeafletModel[];\n  public markerSelected: LeafletModel;\n  private destroy$: Subject<void> = new Subject<void>();\n  private http: HttpFactoryService;\n  private api: APIModel;\n\n  constructor(injector: Injector, @Inject(PANIC) private panicService: PanicFactoryService) {\n    this.http = injector.get(HTTP_SERVICE);\n    this.api = injector.get(API);\n    this.panicService.onCheckPanic()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.getAllPanicStorage();\n    });\n  }\n\n  ngOnInit(): void {\n    this.getAllPanicServer();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private getAllPanicServer(): void {\n    this.http.HTTP_AUTH(this.api['panic']['get-allpanic']).subscribe((values: any[]) => {\n      const temps: any[] = [];\n      values.forEach((data: any) => {\n        temps.push({\n          mark: [\n            data['latestLatitude'], data['latestLongitude'],\n          ],\n          title: data['name'],\n          alt: data['panicCode'],\n          className: 'pulse',\n        });\n      });\n      this.markers = temps;\n      try {\n        this.panicService.clearAllPanic().then(() => {\n          if (values.length) {\n            this.panicService.putAllPanic(values);\n          }\n        });\n      } catch (error) {}\n    });\n  }\n\n  private getAllPanicStorage(): void {\n    this.panicService.getAllPanic().subscribe((values: any[]) => {\n      const temps: any[] = [];\n      values.forEach((data: any) => {\n        temps.push({\n          mark: [\n            data['latestLatitude'], data['latestLongitude'],\n          ],\n          title: data['name'],\n          alt: data['panicCode'],\n          className: 'pulse',\n        });\n      });\n      this.markers = temps;\n    });\n  }\n\n  public onMarker(data: LeafletModel): void {\n    this.markerSelected = data;\n    this.showInfo = true;\n  }\n\n  public onToggleInfo(showInfo: boolean): void {\n    this.showInfo = showInfo;\n  }\n\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { APIModel, API, HTTP_SERVICE, HttpFactoryService } from '@xaphira/shared';\nimport { tap } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'xa-cer-monitoring-preview',\n  templateUrl: './ngxa-cer-monitoring-preview.component.html',\n  styleUrls: ['ngxa-cer-monitoring-preview.component.scss'],\n})\nexport class NgxaCerMonitoringPreviewComponent implements OnInit {\n\n  @Input() public url: any;\n  @Input() public checksum: any;\n  @Input() public user: any;\n  @Input() public fileType: any;\n\n  constructor(\n    @Inject(API)private apiPath: APIModel,\n    @Inject(HTTP_SERVICE)private httpBaseService: HttpFactoryService,\n    public sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this.getEvidence(this.checksum, this.user, this.fileType);\n  }\n\n  private getEvidence(checksum: any, user: string, fileType: string) {\n    this.httpBaseService.HTTP_AUTH(\n    this.apiPath['file']['evidence'], null, null, null,\n    [checksum, user], 'arraybuffer')\n    .pipe(tap((response: any) => {\n        const fileBlob: Blob = new Blob([response], {\n          type: fileType,\n        });\n        const reader: FileReader = new FileReader();\n        reader.readAsDataURL(fileBlob);\n        reader.onloadend = () => {\n          this.url = this.sanitizer.bypassSecurityTrustUrl(reader.result.toString());\n        };\n    })).subscribe();\n  }\n\n}\n","import { Component } from '@angular/core';\nimport { NbDialogRef } from '@nebular/theme';\n\n@Component({\n  selector: 'xa-fake-report-prompt',\n  templateUrl: './ngxa-fake-report-prompt.component.html',\n  styleUrls: ['ngxa-fake-report-prompt.component.scss'],\n})\nexport class NgxaFakeReportPromptComponent {\n\n  public disabled: boolean = false;\n  public password: string;\n\n  constructor(protected ref: NbDialogRef<NgxaFakeReportPromptComponent>) {\n  }\n\n  submit(password) {\n    this.disabled = true;\n    this.ref.close(password);\n  }\n}\n","import { Component, Inject, OnInit, OnDestroy, Injector } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NbDialogService } from '@nebular/theme';\nimport { EncryptionService } from '@xaphira/utils';\nimport { BaseFilterComponent, DatatableColumn, Sort, SelectParamModel } from '@xaphira/ngxa-common';\nimport {\n  PANIC,\n  PanicFactoryService,\n  HttpBaseModel,\n  ApiBaseResponse,\n  SecurityResourceModel,\n  ResponseCode,\n  OAUTH_INFO,\n} from '@xaphira/shared';\nimport { NgxaCerMonitoringPreviewComponent } from '../preview/ngxa-cer-monitoring-preview.component';\nimport { NgxaFakeReportPromptComponent } from './prompt/ngxa-fake-report-prompt.component';\n\n@Component({\n  selector: 'xa-cer-monitoring-detail',\n  templateUrl: './ngxa-cer-monitoring-detail.component.html',\n  styleUrls: ['ngxa-cer-monitoring-detail.component.scss'],\n})\nexport class NgxaCerMonitoringDetailComponent extends BaseFilterComponent<any> implements OnInit, OnDestroy {\n\n  public profile: any = {};\n  public image: string;\n  public imageDefault: string = `${document.getElementsByTagName('base')[0].href}/assets/images/avatars/default.png`;\n\n  public apiPath: HttpBaseModel;\n  public columns: DatatableColumn[] = [\n    { name: 'Evidence', prop: 'fileMetadata', width: 100, frozenLeft: true, type: 'button',\n      button: 'Preview', buttonStatus: 'warning' },\n    { name: 'File Size', prop: 'fileMetadata.size', width: 125, frozenLeft: true, type: 'prefix',\n      prefix: 'bytes' },\n    { name: 'Latitude', prop: 'location.latitude', width: 125, frozenLeft: true },\n    { name: 'Longitude', prop: 'location.longitude', width: 125, frozenLeft: true },\n    { name: 'Address', prop: 'location.formattedAddress', width: 350 },\n    { name: 'Province', prop: 'location.province', width: 150 },\n    { name: 'City', prop: 'location.city', width: 150 },\n    { name: 'District', prop: 'location.district', width: 150 },\n    { name: 'Device ID', prop: 'device.deviceID', width: 150 },\n    { name: 'Device Name', prop: 'device.deviceName', width: 150 },\n  ];\n  public sort: Sort = {\n    'desc': ['createdDate'],\n  };\n  public apiSelectParameter: HttpBaseModel;\n  public paramSelectStatus: SelectParamModel[];\n  public paramSelectEmergency: SelectParamModel[];\n  public disabledFake: boolean;\n  private panicCode: string;\n  private username: string;\n  private oauthResource: SecurityResourceModel;\n  private enc: EncryptionService;\n\n  constructor(public injector: Injector, private router: Router,\n    private route: ActivatedRoute, @Inject(PANIC) private panicService: PanicFactoryService,\n    private dialogService: NbDialogService) {\n    super(injector, null,\n      {\n        'status': [],\n        'emergencyCategory': [],\n      });\n    this.enc = injector.get(EncryptionService);\n    this.oauthResource = injector.get(OAUTH_INFO);\n    this.apiSelectParameter = this.api['master']['select-parameter'];\n    if (this.route.snapshot.params['code']) {\n      this.panicCode = this.route.snapshot.params['code'];\n      this.keyword = {\n        panicCode: this.panicCode,\n      };\n    } else {\n      this.router.navigate(['/app/dashboard']);\n    }\n    this.apiPath = this.api['panic']['datatable-panic-detail'];\n  }\n\n  ngOnDestroy(): void {}\n\n  ngOnInit(): void {\n    this.onInit('security', 'get-profile-personal');\n    this.paramSelectStatus = [{\n      key: 'parameterGroupCode',\n      value: 'STATUS_EMERGENCY',\n    }];\n    this.paramSelectEmergency = [{\n      key: 'parameterGroupCode',\n      value: 'CATEGORY_EMERGENCY',\n    }];\n  }\n\n  onInit(serviceName: string, apiName: string): void {\n    this.panicService.getPanic(this.panicCode).then((value: any) => {\n      this.loadingForm = true;\n      this.username = value.username;\n      const data: any = {\n        username: value.username,\n      };\n      this.exec(serviceName, apiName, data)\n        .subscribe(\n          (success: any) => {\n            this.loadingForm = false;\n            this.profile = success;\n            if (success['image']) {\n              this.image = success['image'];\n            }\n          },\n          (error: HttpErrorResponse) => {\n            this.loadingForm = true;\n            const err: ApiBaseResponse = error['error'];\n            if (err) {\n              this.toastr.showI18n(err.respStatusMessage[err.respStatusCode], true, null, 'danger');\n            } else {\n              this.toastr.showI18n(err as any, true, null, 'danger');\n            }\n          },\n        );\n    });\n  }\n\n  valueSelect(prop: string): string {\n    if (this.formGroup.get(prop).value) {\n      if (this.formGroup.get(prop).value.value) {\n        return this.formGroup.get(prop).value.value;\n      } else {\n        return this.formGroup.get(prop).value;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  onPreview(data: any): void {\n    this.dialogService.open(NgxaCerMonitoringPreviewComponent, {\n      context: {\n        checksum: data['checksum'],\n        user: this.username,\n        fileType: data['fileType'],\n      },\n    });\n  }\n\n  onFake(): void {\n    this.dialogService.open(NgxaFakeReportPromptComponent)\n      .onClose.subscribe((password: string) => {\n        if (password) {\n          this.disabledFake = true;\n          const data: any = {\n            password: this.enc.encryptAES(this.oauthResource['aes_key'], password),\n            panicCode: this.panicCode,\n          };\n          (super.onSubmit(data, 'panic', 'fake-report') as Observable<ApiBaseResponse>)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((response: ApiBaseResponse) => {\n              if (response) {\n                if (response.respStatusCode === ResponseCode.OK_SCR011.toString()) {\n                  this.router.navigate(['/app/dashboard']);\n                }\n              }\n            });\n        } else {\n          this.disabledFake = false;\n        }\n      });\n  }\n\n  onProcess(): void {\n    const data: any = {\n      panicCode: this.panicCode,\n      status: this.valueSelect('status'),\n      emergencyCategory: this.valueSelect('emergencyCategory'),\n    };\n    (super.onSubmit(data, 'panic', 'process-report') as Observable<ApiBaseResponse>)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((response: ApiBaseResponse) => {\n        if (response) {\n          if (response.respStatusCode === ResponseCode.OK_UPDATED.toString()) {\n            this.router.navigate(['/app/dashboard']);\n          }\n        }\n      });\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuardChildService } from '@xaphira/ngxa-auth';\nimport { NgxaDashboardComponent } from './ngxa-dashboard.component';\nimport { NgxaCerMonitoringPageComponent } from './monitoring/ngxa-cer-monitoring-page.component';\nimport { NgxaCerMonitoringDetailComponent } from './monitoring/detail/ngxa-cer-monitoring-detail.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: NgxaDashboardComponent,\n  canActivateChild: [AuthGuardChildService],\n  children: [\n    {\n      path: '',\n      component: NgxaCerMonitoringPageComponent,\n      data: {\n        code: '#DASHBOARD-PAGE',\n      },\n    },\n    {\n      path: 'details/:code',\n      component: NgxaCerMonitoringDetailComponent,\n      data: {\n        code: '#DASHBOARD-PAGE',\n      },\n    },\n  ],\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NgxaCerDashboardRoutingModule {\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'xa-cer-slide-out',\n  styleUrls: ['./ngxa-cer-slide-out.component.scss'],\n  templateUrl: './ngxa-cer-slide-out.component.html',\n})\nexport class NgxaCerSlideOutComponent {\n\n  @Input() public showInfo: boolean = false;\n  @Output() public onToggle: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  toggleDetail() {\n    this.showInfo = !this.showInfo;\n    this.onToggle.emit(this.showInfo);\n  }\n}\n","import { Component, Input, Inject, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NbDialogService } from '@nebular/theme';\nimport { LeafletModel } from '@xaphira/ngxa-common';\nimport { PANIC, PanicFactoryService } from '@xaphira/shared';\nimport { NgxaCerMonitoringPreviewComponent } from '../preview/ngxa-cer-monitoring-preview.component';\n\n@Component({\n  selector: 'xa-cer-monitoring-info',\n  templateUrl: './ngxa-cer-monitoring-info.component.html',\n  styleUrls: ['ngxa-cer-monitoring-info.component.scss'],\n})\nexport class NgxaCerMonitoringInfoComponent implements OnInit {\n\n  @Input() public set markerFn(marker: LeafletModel) {\n    if (marker) {\n      this.panicService.getPanic(marker.alt).then((value: any) => {\n        this.data = value;\n      });\n    }\n  }\n  public marker: LeafletModel = { mark: [0,0]};\n  public data: any = {};\n\n  constructor(private router: Router, @Inject(PANIC) private panicService: PanicFactoryService,\n    private dialogService: NbDialogService) {}\n\n  ngOnInit(): void {\n  }\n\n  public onViewDetails(): void {\n    this.router.navigate(['/app/dashboard/details', this.data['panicCode']]);\n  }\n\n  onPreview(): void {\n    this.dialogService.open(NgxaCerMonitoringPreviewComponent, {\n      context: {\n        checksum: this.data['fileMetadata']['checksum'],\n        user: this.data['username'],\n        fileType: this.data['fileMetadata']['fileType'],\n      },\n    });\n  }\n\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Inject,\n  LOCALE_ID,\n  Injector,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ChangeDetectorRef,\n  ViewChild,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Subject, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ColumnMode, SelectionType, SortType, DatatableComponent } from '@swimlane/ngx-datatable';\nimport { DatatableColumn, Page, DatatableFilter, Keyword, Sort } from '@xaphira/ngxa-common';\nimport { LayoutService } from '@xaphira/ngxa-theme';\nimport { HttpFactoryService, HTTP_SERVICE, HttpBaseModel } from '@xaphira/shared';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'xa-cer-datatable',\n  styleUrls: ['./ngxa-cer-datatable.component.scss'],\n  templateUrl: './ngxa-cer-datatable.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxaCerDatatableComponent implements OnInit, OnDestroy {\n  @Input() rows: any[] = [];\n  @Input() columns: DatatableColumn[] = [];\n  @Input() filters: DatatableFilter[] = [];\n  @Input() selected: any[] = [];\n  @Input() limit: number | undefined = 10;\n  @Input() count: number = 0;\n  @Input() offset: number = 0;\n  @Input() externalPaging: boolean = false;\n  @Input() externalSorting: boolean = false;\n  @Input() loadingIndicator: boolean = false;\n  @Input() scrollbarH: boolean = true;\n  @Input() scrollbarV: boolean = false;\n  @Input() reorderable: boolean = true;\n  @Input() sortType: SortType = SortType.single;\n  @Input() messages: any;\n  @Input() selectionType: SelectionType;\n  @Input() columnMode: ColumnMode = ColumnMode.force;\n  @Input() headerHeight: any = 40;\n  @Input() footerHeight: any = 'auto';\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number) = 'auto';\n  @Input() column: boolean = true;\n  @Input() footer: boolean = true;\n  @Input() api: HttpBaseModel;\n  @Input() startWithOpenData: boolean = true;\n  @Input() filterEvent: boolean = false;\n  @Input() formGroupFilter: FormGroup;\n  @Output() buttonCell: EventEmitter<any> = new EventEmitter<any>();\n  @Output() select: EventEmitter<any> = new EventEmitter<any>();\n  @Output() activate: EventEmitter<any> = new EventEmitter<any>();\n  @ViewChild('datatable', {static: false}) datatable: DatatableComponent;\n  @Input() set filterFn(keyword: Keyword) {\n    this.keywordParam = keyword;\n    this._keyword = keyword;\n    this.count = 0;\n    this.offset = 0;\n  }\n\n  public keywordParam: Keyword;\n  public _keyword: Keyword;\n  protected http: HttpFactoryService;\n  private destroy$: Subject<any> = new Subject<any>();\n  private cdref: ChangeDetectorRef;\n  private sort: Sort;\n  private pageOffset: number = 0;\n\n  constructor(@Inject(LOCALE_ID) public locale: string,\n    private layout: LayoutService,\n    public injector: Injector) {\n      this.http = injector.get(HTTP_SERVICE);\n      this.cdref = injector.get(ChangeDetectorRef);\n  }\n\n  ngOnInit(): void {\n    if (this.startWithOpenData) {\n      this.fetch();\n    }\n    this.layout.onChangeLayoutSize().takeUntil(this.destroy$).subscribe(() => {\n      this.datatable.recalculate();\n      this.cdref.detectChanges();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n    this.destroy$.unsubscribe();\n  }\n\n  fetch(): void {\n    if (this.api) {\n      this.externalPaging = true;\n      this.externalSorting = true;\n      this.getRequest().subscribe(rows => {\n        this.rows = rows;\n        this.cdref.detectChanges();\n      });\n    }\n  }\n\n  onSort(order: any): void {\n    if (order) {\n      if (Array.isArray(order.sorts)) {\n        order.sorts.forEach(sort => {\n          if (sort['dir'] === 'asc') {\n            this.sort = { asc : [sort['prop']]};\n          } else {\n            this.sort = { desc : [sort['prop']]};\n          }\n        });\n      }\n    }\n    this.fetch();\n  }\n\n  onSelect(selected: any): void {\n    this.select.emit(selected);\n  }\n\n  onActivate(event: any): void {\n    if (event.type === 'click') {\n      if (this.selectionType === 'checkbox') {\n        if (event.cellIndex > 0) {\n          this.activate.emit(event.row);\n        }\n      } else {\n        this.activate.emit(event.row);\n      }\n    }\n  }\n\n  setPage(page: Page): void {\n    this.pageOffset = page.offset * this.limit;\n    this.fetch();\n  }\n\n  sanitizedValue(value: any): any {\n    return value !== null && value !== undefined ? this.stripHtml(value) : value;\n  }\n\n  stripHtml(html: string): string {\n    if (!html.replace) {\n      return html;\n    }\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\n  }\n\n  onClickButton(event): void {\n    this.buttonCell.emit(event);\n  }\n\n  private getRequest(): Observable<any[]> {\n    const body: any = {\n      offset: this.pageOffset,\n      limit: this.limit,\n      keyword : this._keyword,\n      order: this.sort,\n    };\n    this.loadingIndicator = true;\n    return this.http.HTTP_AUTH(this.api, body)\n      .pipe(\n        map((response: any) => {\n          this.count = Number(response.totalRecord);\n          this.loadingIndicator = false;\n          return (<any[]> response['data']);\n        }),\n        catchError(() => {\n          this.loadingIndicator = false;\n          this.count = 0;\n          return of([]);\n        }));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NbCardModule, NbAlertModule, NbIconModule, NbDialogModule, NbWindowModule } from '@nebular/theme';\nimport { NgxaThemeModule } from '@xaphira/ngxa-theme';\nimport {\n  NgxaInputModule,\n  NgxaCheckBoxModule,\n  NgxaButtonModule,\n  NgxaBaseModule,\n  NgxaSelectModule,\n  NgxaMapsModule,\n  NgxaTableModule,\n  NgxaLabelModule,\n} from '@xaphira/ngxa-common';\nimport { NgxaCerDashboardRoutingModule } from './ngxa-cer-dashboard-routing.module';\nimport { NgxaCerMonitoringPageComponent } from './monitoring/ngxa-cer-monitoring-page.component';\nimport { NgxaCerMonitoringDetailComponent } from './monitoring/detail/ngxa-cer-monitoring-detail.component';\nimport { NgxaCerSlideOutComponent } from './monitoring/slide-out/ngxa-cer-slide-out.component';\nimport { NgxaCerMonitoringInfoComponent } from './monitoring/info/ngxa-cer-monitoring-info.component';\nimport { NgxaDashboardComponent } from './ngxa-dashboard.component';\nimport { NgxaCerDatatableComponent } from './monitoring/detail/datatable/ngxa-cer-datatable.component';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { NgxaCerMonitoringPreviewComponent } from './monitoring/preview/ngxa-cer-monitoring-preview.component';\nimport { NgxaFakeReportPromptComponent } from './monitoring/detail/prompt/ngxa-fake-report-prompt.component';\n\nconst components = [\n  NgxaDashboardComponent,\n  NgxaCerMonitoringPageComponent,\n  NgxaCerMonitoringInfoComponent,\n  NgxaCerSlideOutComponent,\n  NgxaCerDatatableComponent,\n  NgxaCerMonitoringDetailComponent,\n  NgxaCerMonitoringPreviewComponent,\n  NgxaFakeReportPromptComponent,\n];\n\nconst modules = [\n  FormsModule,\n  ReactiveFormsModule,\n  NbCardModule,\n  NbAlertModule,\n  NbIconModule,\n  NbDialogModule.forChild(),\n  NbWindowModule.forChild(),\n  NgxaThemeModule,\n  NgxaInputModule,\n  NgxaCheckBoxModule,\n  NgxaButtonModule,\n  NgxaBaseModule,\n  NgxaSelectModule,\n  NgxaMapsModule,\n  NgxDatatableModule,\n  NgxaTableModule,\n  NgxaLabelModule,\n  NgxaCerDashboardRoutingModule,\n];\n\nconst providers = [\n];\n\nconst entryComponents = [\n  NgxaCerMonitoringPreviewComponent,\n  NgxaFakeReportPromptComponent,\n];\n\n@NgModule({\n  imports: [\n    ...modules,\n  ],\n  declarations: [\n    ...components,\n  ],\n  providers: [\n    ...providers,\n  ],\n  entryComponents: [\n    ...entryComponents,\n  ],\n})\nexport class NgxaCerDashboardModule { }\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: [],\n})\nexport class NgxaCerFakeModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'xa-cer-report',\n  template: `\n    <router-outlet></router-outlet>\n  `,\n})\nexport class NgxaCerReportsComponent {\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ReportsPanicService {\n\n    private reports: any;\n\n    public getReports(): any {\n        return this.reports;\n    }\n\n    public setReports(reports: any) {\n        this.reports = reports;\n    }\n\n}\n","import { Component, OnInit, Injector, OnDestroy } from '@angular/core';\nimport { SelectionType } from '@swimlane/ngx-datatable';\nimport { Router } from '@angular/router';\nimport { HttpBaseModel } from '@xaphira/shared';\nimport { BaseFilterComponent } from '@xaphira/ngxa-common';\nimport { DatatableColumn } from '@xaphira/ngxa-common';\nimport { ReportsPanicService } from '../../services/reports-panic.service';\n\n@Component({\n  selector: 'xa-reports-emergency-list-page',\n  styleUrls: ['./ngxa-reports-emergency-list-page.component.scss'],\n  templateUrl: './ngxa-reports-emergency-list-page.component.html',\n})\nexport class NgxaReportsEmergencyListPageComponent extends BaseFilterComponent<any> implements OnInit, OnDestroy {\n\n  public apiPath: HttpBaseModel;\n  public selectionType: SelectionType = SelectionType.single;\n  public columns: DatatableColumn[] = [\n    { name: 'Name', prop: 'name', width: 225, frozenLeft: true},\n    { name: 'Address', prop: 'latestFormattedAddress', width: 275, frozenLeft: true},\n    { name: 'Gender', prop: 'gender', width: 125, frozenLeft: true },\n    { name: 'Phone Number', prop: 'phoneNumber', width: 140, frozenLeft: true },\n    { name: 'Emergency Category', prop: 'emergencyCategory' },\n    { name: 'Status', prop: 'status' },\n    { name: 'Created', prop: 'createdBy' },\n    { name: 'Created Date', prop: 'createdDate' },\n    { name: 'Modified', prop: 'modifiedBy' },\n    { name: 'Modified Date', prop: 'modifiedDate' },\n    { name: 'Active', prop: 'active' },\n  ];\n  public expanded: boolean = false;\n\n  constructor(public injector: Injector, private router: Router, private reportService: ReportsPanicService) {\n    super(injector, {\n      'fullname': [],\n      'phoneNumber': [],\n      'latestFormattedAddress': [],\n    });\n    this.apiPath = this.api['panic']['datatable-panic-reports'];\n    this.filters = [\n      { controlName: 'fullname', type: 'input' },\n      { controlName: 'phoneNumber', type: 'input' },\n      { controlName: 'latestFormattedAddress', type: 'input' }];\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {}\n\n  onViewDetail(data): void {\n    this.reportService.setReports(data);\n    this.router.navigate(['/app/reports/emergency/detail']);\n  }\n\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { APIModel, API, HTTP_SERVICE, HttpFactoryService } from '@xaphira/shared';\nimport { tap } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'xa-reports-preview',\n  templateUrl: './ngxa-reports-preview.component.html',\n  styleUrls: ['ngxa-reports-preview.component.scss'],\n})\nexport class NgxaReportsPreviewComponent implements OnInit {\n\n  @Input() public url: any;\n  @Input() public checksum: any;\n  @Input() public user: any;\n  @Input() public fileType: any;\n\n  constructor(\n    @Inject(API)private apiPath: APIModel,\n    @Inject(HTTP_SERVICE)private httpBaseService: HttpFactoryService,\n    public sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this.getEvidence(this.checksum, this.user, this.fileType);\n  }\n\n  private getEvidence(checksum: any, user: string, fileType: string) {\n    this.httpBaseService.HTTP_AUTH(\n    this.apiPath['file']['evidence'], null, null, null,\n    [checksum, user], 'arraybuffer')\n    .pipe(tap((response: any) => {\n        const fileBlob: Blob = new Blob([response], {\n          type: fileType,\n        });\n        const reader: FileReader = new FileReader();\n        reader.readAsDataURL(fileBlob);\n        reader.onloadend = () => {\n          this.url = this.sanitizer.bypassSecurityTrustUrl(reader.result.toString());\n        };\n    })).subscribe();\n  }\n\n}\n","import { Component } from '@angular/core';\nimport { NbDialogRef } from '@nebular/theme';\n\n@Component({\n  selector: 'xa-fake-prompt',\n  templateUrl: './ngxa-fake-prompt.component.html',\n  styleUrls: ['ngxa-fake-prompt.component.scss'],\n})\nexport class NgxaFakePromptComponent {\n\n  public disabled: boolean = false;\n  public password: string;\n\n  constructor(protected ref: NbDialogRef<NgxaFakePromptComponent>) {\n  }\n\n  submit(password) {\n    this.disabled = true;\n    this.ref.close(password);\n  }\n}\n","import { Component, Inject, OnInit, OnDestroy, Injector } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NbDialogService } from '@nebular/theme';\nimport { EncryptionService } from '@xaphira/utils';\nimport { BaseFilterComponent, DatatableColumn, Sort, SelectParamModel } from '@xaphira/ngxa-common';\nimport {\n  PANIC,\n  PanicFactoryService,\n  HttpBaseModel,\n  ApiBaseResponse,\n  SecurityResourceModel,\n  ResponseCode,\n  OAUTH_INFO,\n} from '@xaphira/shared';\nimport { NgxaReportsPreviewComponent } from './preview/ngxa-reports-preview.component';\nimport { NgxaFakePromptComponent } from './prompt/ngxa-fake-prompt.component';\nimport { ReportsPanicService } from '../../services/reports-panic.service';\n\n@Component({\n  selector: 'xa-reports-emergency-detail.component',\n  templateUrl: './ngxa-reports-emergency-detail.component.html',\n  styleUrls: ['ngxa-reports-emergency-detail.component.scss'],\n})\nexport class NgxaReportsEmergencyDetailComponent extends BaseFilterComponent<any> implements OnInit, OnDestroy {\n\n  public profile: any = {};\n  public image: string;\n  public imageDefault: string = `${document.getElementsByTagName('base')[0].href}/assets/images/avatars/default.png`;\n\n  public apiPath: HttpBaseModel;\n  public columns: DatatableColumn[] = [\n    { name: 'Evidence', prop: 'fileMetadata', width: 100, frozenLeft: true, type: 'button',\n      button: 'Preview', buttonStatus: 'warning' },\n    { name: 'File Size', prop: 'fileMetadata.size', width: 125, frozenLeft: true, type: 'prefix',\n      prefix: 'bytes' },\n    { name: 'Latitude', prop: 'location.latitude', width: 125, frozenLeft: true },\n    { name: 'Longitude', prop: 'location.longitude', width: 125, frozenLeft: true },\n    { name: 'Address', prop: 'location.formattedAddress', width: 350 },\n    { name: 'Province', prop: 'location.province', width: 150 },\n    { name: 'City', prop: 'location.city', width: 150 },\n    { name: 'District', prop: 'location.district', width: 150 },\n    { name: 'Device ID', prop: 'device.deviceID', width: 150 },\n    { name: 'Device Name', prop: 'device.deviceName', width: 150 },\n  ];\n  public sort: Sort = {\n    'desc': ['createdDate'],\n  };\n  public apiSelectParameter: HttpBaseModel;\n  public paramSelectStatus: SelectParamModel[];\n  public paramSelectEmergency: SelectParamModel[];\n  public disabledFake: boolean;\n  private username: string;\n  private oauthResource: SecurityResourceModel;\n  private enc: EncryptionService;\n  private dataReport: any;\n\n  constructor(public injector: Injector, private router: Router,\n    private route: ActivatedRoute,\n    private dialogService: NbDialogService, private reportService: ReportsPanicService) {\n    super(injector, null,\n      {\n        'status': [],\n        'emergencyCategory': [],\n      });\n    this.enc = injector.get(EncryptionService);\n    this.oauthResource = injector.get(OAUTH_INFO);\n    this.apiSelectParameter = this.api['master']['select-parameter'];\n    this.dataReport = this.reportService.getReports();\n    this.keyword = {\n      panicCode: this.dataReport['panicCode'],\n    };\n    this.username = this.dataReport['username'],\n    this.apiPath = this.api['panic']['datatable-panic-detail'];\n  }\n\n  ngOnDestroy(): void {}\n\n  ngOnInit(): void {\n    this.onInit('security', 'get-profile-personal');\n    this.paramSelectStatus = [{\n      key: 'parameterGroupCode',\n      value: 'STATUS_EMERGENCY',\n    }];\n    this.paramSelectEmergency = [{\n      key: 'parameterGroupCode',\n      value: 'CATEGORY_EMERGENCY',\n    }];\n  }\n\n  onInit(serviceName: string, apiName: string): void {\n    this.loadingForm = true;\n    const data: any = {\n      username: this.username,\n    };\n    this.exec(serviceName, apiName, data)\n      .subscribe(\n        (success: any) => {\n          this.loadingForm = false;\n          this.profile = success;\n          if (success['image']) {\n            this.image = success['image'];\n          }\n        },\n        (error: HttpErrorResponse) => {\n          this.loadingForm = true;\n          const err: ApiBaseResponse = error['error'];\n          if (err) {\n            this.toastr.showI18n(err.respStatusMessage[err.respStatusCode], true, null, 'danger');\n          } else {\n            this.toastr.showI18n(err as any, true, null, 'danger');\n          }\n        },\n      );\n  }\n\n  valueSelect(prop: string): string {\n    if (this.formGroup.get(prop).value) {\n      if (this.formGroup.get(prop).value.value) {\n        return this.formGroup.get(prop).value.value;\n      } else {\n        return this.formGroup.get(prop).value;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  onPreview(data: any): void {\n    this.dialogService.open(NgxaReportsPreviewComponent, {\n      context: {\n        checksum: data['checksum'],\n        user: this.username,\n        fileType: data['fileType'],\n      },\n    });\n  }\n\n  onFake(): void {\n    this.dialogService.open(NgxaFakePromptComponent)\n      .onClose.subscribe((password: string) => {\n        if (password) {\n          this.disabledFake = true;\n          const data: any = {\n            password: this.enc.encryptAES(this.oauthResource['aes_key'], password),\n            panicCode: this.dataReport['panicCode'],\n          };\n          (super.onSubmit(data, 'panic', 'fake-report') as Observable<ApiBaseResponse>)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((response: ApiBaseResponse) => {\n              if (response) {\n                if (response.respStatusCode === ResponseCode.OK_SCR011.toString()) {\n                  this.router.navigate(['/app/dashboard']);\n                }\n              }\n            });\n        } else {\n          this.disabledFake = false;\n        }\n      });\n  }\n\n  onProcess(): void {\n    const data: any = {\n      panicCode: this.dataReport['panicCode'],\n      status: this.valueSelect('status'),\n      emergencyCategory: this.valueSelect('emergencyCategory'),\n    };\n    (super.onSubmit(data, 'panic', 'process-report') as Observable<ApiBaseResponse>)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((response: ApiBaseResponse) => {\n        if (response) {\n          if (response.respStatusCode === ResponseCode.OK_UPDATED.toString()) {\n            this.router.navigate(['/app/dashboard']);\n          }\n        }\n      });\n\n  }\n\n}\n","import { Component, OnInit, Injector, OnDestroy } from '@angular/core';\nimport { SelectionType } from '@swimlane/ngx-datatable';\nimport { Router } from '@angular/router';\nimport { HttpBaseModel } from '@xaphira/shared';\nimport { BaseFilterComponent } from '@xaphira/ngxa-common';\nimport { DatatableColumn } from '@xaphira/ngxa-common';\nimport { ReportsPanicService } from '../../services/reports-panic.service';\n\n@Component({\n  selector: 'xa-reports-fake-list-page',\n  styleUrls: ['./ngxa-reports-fake-list-page.component.scss'],\n  templateUrl: './ngxa-reports-fake-list-page.component.html',\n})\nexport class NgxaReportsFakeListPageComponent extends BaseFilterComponent<any> implements OnInit, OnDestroy {\n\n  public apiPath: HttpBaseModel;\n  public selectionType: SelectionType = SelectionType.single;\n  public columns: DatatableColumn[] = [\n    { name: 'Username', prop: 'username', width: 125, frozenLeft: true},\n    { name: 'Name', prop: 'name', width: 225, frozenLeft: true},\n    { name: 'Address', prop: 'latestFormattedAddress', width: 275, frozenLeft: true},\n    { name: 'Gender', prop: 'gender', width: 125, frozenLeft: true },\n    { name: 'Phone Number', prop: 'phoneNumber', width: 140, frozenLeft: true },\n    { name: 'Created', prop: 'createdBy' },\n    { name: 'Created Date', prop: 'createdDate' },\n    { name: 'Modified', prop: 'modifiedBy' },\n    { name: 'Modified Date', prop: 'modifiedDate' },\n    { name: 'Active', prop: 'active' },\n  ];\n  public expanded: boolean = false;\n\n  constructor(public injector: Injector, private router: Router, private reportService: ReportsPanicService) {\n    super(injector, {\n      'fullname': [],\n      'phoneNumber': [],\n      'latestFormattedAddress': [],\n    });\n    this.apiPath = this.api['panic']['datatable-fake-reports'];\n    this.filters = [\n      { controlName: 'fullname', type: 'input' },\n      { controlName: 'phoneNumber', type: 'input' },\n      { controlName: 'latestFormattedAddress', type: 'input' }];\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {}\n\n  onViewDetail(data): void {\n    this.reportService.setReports(data);\n    this.router.navigate(['/app/reports/fake/detail']);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuardChildService } from '@xaphira/ngxa-auth';\nimport { NgxaCerReportsComponent } from './ngxa-cer-reports.component';\nimport { NgxaReportsEmergencyListPageComponent } from './emergency/list/ngxa-reports-emergency-list-page.component';\nimport {\n  NgxaReportsEmergencyDetailComponent,\n} from './emergency/detail/ngxa-reports-emergency-detail.component';\nimport { NgxaReportsFakeListPageComponent } from './fake/list/ngxa-reports-fake-list-page.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: NgxaCerReportsComponent,\n  canActivateChild: [AuthGuardChildService],\n  children: [\n    {\n      path: 'emergency',\n      component: NgxaReportsEmergencyListPageComponent,\n      data: {\n        code: '#EMERGENCY-REPORTS-PAGE',\n      },\n    },\n    {\n      path: 'emergency/detail',\n      component: NgxaReportsEmergencyDetailComponent,\n      data: {\n        code: '#EMERGENCY-REPORTS-PAGE',\n      },\n    },\n    {\n      path: 'fake',\n      component: NgxaReportsFakeListPageComponent,\n      data: {\n        code: '#FAKE-REPORTS-PAGE',\n      },\n    },\n  ],\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NgxaCerReportsRoutingModule {\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { NbCardModule, NbAlertModule, NbIconModule, NbDialogModule, NbWindowModule } from '@nebular/theme';\nimport { NgxaThemeModule } from '@xaphira/ngxa-theme';\nimport {\n  NgxaInputModule,\n  NgxaButtonModule,\n  NgxaBaseModule,\n  NgxaTableModule,\n  NgxaLabelModule,\n  NgxaCheckBoxModule,\n  NgxaSelectModule,\n} from '@xaphira/ngxa-common';\nimport { NgxaCerReportsComponent } from './ngxa-cer-reports.component';\nimport { NgxaCerReportsRoutingModule } from './ngxa-cer-reports-routing.module';\nimport { ReportsPanicService } from './services/reports-panic.service';\nimport { NgxaReportsEmergencyListPageComponent } from './emergency/list/ngxa-reports-emergency-list-page.component';\nimport { NgxaFakePromptComponent } from './emergency/detail/prompt/ngxa-fake-prompt.component';\nimport { NgxaReportsPreviewComponent } from './emergency/detail/preview/ngxa-reports-preview.component';\nimport {\n  NgxaReportsEmergencyDetailComponent,\n} from './emergency/detail/ngxa-reports-emergency-detail.component';\nimport { NgxaReportsFakeListPageComponent } from './fake/list/ngxa-reports-fake-list-page.component';\n\nconst components = [\n  NgxaCerReportsComponent,\n  NgxaReportsEmergencyListPageComponent,\n  NgxaReportsEmergencyDetailComponent,\n  NgxaFakePromptComponent,\n  NgxaReportsPreviewComponent,\n  NgxaReportsFakeListPageComponent,\n];\n\nconst modules = [\n  FormsModule,\n  ReactiveFormsModule,\n  NbCardModule,\n  NbAlertModule,\n  NbIconModule,\n  NbDialogModule.forChild(),\n  NbWindowModule.forChild(),\n  NgxaThemeModule,\n  NgxaInputModule,\n  NgxaCheckBoxModule,\n  NgxaButtonModule,\n  NgxaBaseModule,\n  NgxaSelectModule,\n  NgxDatatableModule,\n  NgxaTableModule,\n  NgxaLabelModule,\n  NgxaCerReportsRoutingModule,\n];\n\nconst providers = [\n  ReportsPanicService,\n];\n\nconst entry_components = [\n  NgxaFakePromptComponent,\n  NgxaReportsPreviewComponent,\n];\n\n@NgModule({\n  imports: [\n    ...modules,\n  ],\n  declarations: [\n    ...components,\n  ],\n  providers: [\n    ...providers,\n  ],\n  entryComponents: [\n    ...entry_components,\n  ],\n})\nexport class NgxaCerReportsModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'xa-cer-statistics',\n  template: `\n    <router-outlet></router-outlet>\n  `,\n})\nexport class NgxaStatisticsComponent {\n}\n","import { Component, OnInit, OnDestroy, Injector } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { NbThemeService } from '@nebular/theme';\nimport { HttpFactoryService, HTTP_SERVICE, API, APIModel } from '@xaphira/shared';\n\n@Component({\n  selector: 'xa-cer-statistics-area',\n  styleUrls: ['./ngxa-cer-statistics-area-page.component.scss'],\n  templateUrl: './ngxa-cer-statistics-area-page.component.html',\n})\nexport class NgxaCerStatisticsAreaPageComponent implements OnInit, OnDestroy {\n\n  public options: any = {};\n  public data: any;\n  public dataSelect: any[];\n  public selected: any;\n  private destroy$: Subject<void> = new Subject<void>();\n  private http: HttpFactoryService;\n  private api: APIModel;\n  private themeSubscription: Subscription;\n  private axis: any[];\n  private legend: any[];\n  private series: any[];\n\n\n  constructor(injector: Injector, private theme: NbThemeService) {\n    this.http = injector.get(HTTP_SERVICE);\n    this.api = injector.get(API);\n  }\n\n  ngOnInit(): void {\n    const year: number = new Date().getFullYear();\n    const tempData: number[] = [];\n    for (let i: number = 3; i >= 0; i--) {\n      tempData.push(year - i);\n    }\n    this.dataSelect = tempData;\n    this.selected = year;\n    this.getStatistics();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.themeSubscription.unsubscribe();\n  }\n\n  private getStatistics(): void {\n    this.http.HTTP_AUTH(\n      this.api['panic']['statistics-area'],\n      null,\n      null,\n      null,\n      [this.selected]).subscribe((values: any) => {\n        this.axis = values['axis']['data'];\n        this.legend = values['legend']['data'];\n        this.series = [];\n        values['series'].forEach((series: any) => {\n          const dataSeries: any[] = [];\n          values['axis']['data'].forEach((axis: any) => {\n            dataSeries.push(series['data'][axis]);\n          });\n          this.series.push({\n            name: series['name'],\n            type: 'bar',\n            barWidth: '60%',\n            data: dataSeries,\n          });\n        });\n        this.buildChart();\n    });\n  }\n\n  private buildChart(): void {\n    this.themeSubscription = this.theme.getJsTheme().subscribe(config => {\n\n      const colors: any = config.variables;\n      const echarts: any = config.variables.echarts;\n\n      this.options = {\n        backgroundColor: echarts.bg,\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow',\n          },\n        },\n        legend: {\n          data: this.legend,\n          textStyle: {\n            color: echarts.textColor,\n          },\n        },\n        grid: {\n          left: '2%',\n          right: '3%',\n          bottom: '5%',\n          top: '15%',\n          containLabel: true,\n        },\n        xAxis: [\n          {\n            type: 'value',\n            axisLine: {\n              lineStyle: {\n                color: echarts.axisLineColor,\n              },\n            },\n            splitLine: {\n              lineStyle: {\n                color: echarts.splitLineColor,\n              },\n            },\n            axisLabel: {\n              textStyle: {\n                color: echarts.textColor,\n              },\n            },\n          },\n        ],\n        yAxis: [\n          {\n            type: 'category',\n            data: this.axis,\n            axisTick: {\n              alignWithLabel: true,\n            },\n            axisLine: {\n              lineStyle: {\n                color: echarts.axisLineColor,\n              },\n            },\n            axisLabel: {\n              textStyle: {\n                color: echarts.textColor,\n              },\n            },\n          },\n        ],\n        series: this.series,\n      };\n    });\n  }\n\n  public onSelectChange(data: any): void {\n    this.selected = data;\n    this.getStatistics();\n  }\n\n  private random() {\n    return Math.round(Math.random() * 100);\n  }\n\n}\n","import { Component, OnInit, OnDestroy, Injector } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { NbThemeService } from '@nebular/theme';\nimport { HttpFactoryService, HTTP_SERVICE, API, APIModel } from '@xaphira/shared';\n\n@Component({\n  selector: 'xa-cer-statistics-gender',\n  styleUrls: ['./ngxa-cer-statistics-gender-page.component.scss'],\n  templateUrl: './ngxa-cer-statistics-gender-page.component.html',\n})\nexport class NgxaCerStatisticsGenderPageComponent implements OnInit, OnDestroy {\n\n  public options: any = {};\n  public data: any;\n  public dataSelect: any[];\n  public selected: any;\n  private destroy$: Subject<void> = new Subject<void>();\n  private http: HttpFactoryService;\n  private api: APIModel;\n  private themeSubscription: Subscription;\n  private legend: any[];\n  private series: any[];\n  private echarts: any;\n\n  constructor(injector: Injector, private theme: NbThemeService) {\n    this.http = injector.get(HTTP_SERVICE);\n    this.api = injector.get(API);\n  }\n\n  ngOnInit(): void {\n    const year: number = new Date().getFullYear();\n    const tempData: number[] = [];\n    for (let i: number = 3; i >= 0; i--) {\n      tempData.push(year - i);\n    }\n    this.dataSelect = tempData;\n    this.selected = year;\n    this.getStatistics();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.themeSubscription.unsubscribe();\n  }\n\n  private getStatistics(): void {\n    this.buildChart();\n  }\n\n  private buildChart(): void {\n    this.themeSubscription = this.theme.getJsTheme().subscribe(config => {\n\n      const colors = config.variables;\n      this.echarts = config.variables.echarts;\n      \n      this.http.HTTP_AUTH(\n        this.api['panic']['statistics-gender'],\n        null,\n        null,\n        null,\n        [this.selected]).subscribe((values: any) => {\n          this.legend = values['legend']['data'];\n          this.series = [];\n          console.log(values['series']);\n          values['series'].forEach((series: any) => {\n            const dataSeries: any[] = [];\n            values['axis']['data'].forEach((axis: any) => {\n              dataSeries.push({\n                value: series['data'][axis],\n                name: axis,\n              });\n            });\n            this.series.push({\n              name: series['name'],\n              type: 'pie',\n              radius: '80%',\n              center: ['50%', '50%'],\n              data: dataSeries,\n              itemStyle: {\n                emphasis: {\n                  shadowBlur: 10,\n                  shadowOffsetX: 0,\n                  shadowColor: this.echarts.itemHoverShadowColor,\n                },\n              },\n              label: {\n                normal: {\n                  textStyle: {\n                    color: this.echarts.textColor,\n                  },\n                },\n              },\n              labelLine: {\n                normal: {\n                  lineStyle: {\n                    color: this.echarts.axisLineColor,\n                  },\n                },\n              },\n            });\n\n            this.options = {\n              backgroundColor: this.echarts.bg,\n              tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b} : {c} ({d}%)',\n              },\n              legend: {\n                orient: 'vertical',\n                left: 'left',\n                data: this.legend,\n                textStyle: {\n                  color: this.echarts.textColor,\n                },\n              },\n              calculable: true,\n              series: this.series,\n            };\n          });\n      });\n    });\n  }\n\n  public onSelectChange(data: any): void {\n    this.selected = data;\n    this.getStatistics();\n  }\n\n}\n","import { Component, OnInit, OnDestroy, Inject, Injector } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { NbThemeService } from '@nebular/theme';\nimport { HttpFactoryService, HTTP_SERVICE, API, APIModel } from '@xaphira/shared';\n\n@Component({\n  selector: 'xa-cer-statistics-periode',\n  styleUrls: ['./ngxa-cer-statistics-periode-page.component.scss'],\n  templateUrl: './ngxa-cer-statistics-periode-page.component.html',\n})\nexport class NgxaCerStatisticsPeriodePageComponent implements OnInit, OnDestroy {\n\n  public options: any = {};\n  public data: any;\n  public dataSelect: any[];\n  public selected: any;\n  private destroy$: Subject<void> = new Subject<void>();\n  private http: HttpFactoryService;\n  private api: APIModel;\n  private themeSubscription: Subscription;\n  private axis: any[];\n  private legend: any[];\n  private series: any[];\n\n  constructor(injector: Injector, private theme: NbThemeService) {\n    this.http = injector.get(HTTP_SERVICE);\n    this.api = injector.get(API);\n  }\n\n  ngOnInit(): void {\n    const year: number = new Date().getFullYear();\n    const tempData: number[] = [];\n    for (let i: number = 3; i >= 0; i--) {\n      tempData.push(year - i);\n    }\n    this.dataSelect = tempData;\n    this.selected = year;\n    this.getStatistics();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.themeSubscription.unsubscribe();\n  }\n\n  private getStatistics(): void {\n    this.http.HTTP_AUTH(\n      this.api['panic']['statistics-periode'],\n      null,\n      null,\n      null,\n      [this.selected]).subscribe((values: any) => {\n        this.axis = values['axis']['data'];\n        this.legend = values['legend']['data'];\n        this.series = [];\n        values['series'].forEach((series: any) => {\n          const dataSeries: any[] = [];\n          values['axis']['data'].forEach((axis: any) => {\n            dataSeries.push(series['data'][axis]);\n          });\n          this.series.push({\n            name: series['name'],\n            type: 'line',\n            smooth: true,\n            data: dataSeries,\n          });\n        });\n        this.buildChart();\n    });\n  }\n\n  private buildChart(): void {\n    this.themeSubscription = this.theme.getJsTheme().subscribe(config => {\n\n      const colors: any = config.variables;\n      const echarts: any = config.variables.echarts;\n\n      this.options = {\n        backgroundColor: echarts.bg,\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n          },\n        },\n        legend: {\n          data: this.legend,\n          textStyle: {\n            color: echarts.textColor,\n          },\n        },\n        grid: {\n          left: '2%',\n          right: '3%',\n          bottom: '5%',\n          containLabel: true,\n        },\n        xAxis: [\n          {\n            type: 'category',\n            data: this.axis,\n            axisTick: {\n              alignWithLabel: true,\n            },\n            axisLine: {\n              lineStyle: {\n                color: echarts.axisLineColor,\n              },\n            },\n            axisLabel: {\n              textStyle: {\n                color: echarts.textColor,\n              },\n            },\n          },\n        ],\n        yAxis: [\n          {\n            type: 'value',\n            axisLine: {\n              lineStyle: {\n                color: echarts.axisLineColor,\n              },\n            },\n            splitLine: {\n              lineStyle: {\n                color: echarts.splitLineColor,\n              },\n            },\n            axisLabel: {\n              textStyle: {\n                color: echarts.textColor,\n              },\n            },\n          },\n        ],\n        series: this.series,\n      };\n    });\n  }\n\n  public onSelectChange(data: any): void {\n    this.selected = data;\n    this.getStatistics();\n  }\n\n  private random() {\n    return Math.round(Math.random() * 100);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuardChildService } from '@xaphira/ngxa-auth';\nimport { NgxaStatisticsComponent } from './ngxa-statistics.component';\nimport { NgxaCerStatisticsAreaPageComponent } from './area/ngxa-cer-statistics-area-page.component';\nimport { NgxaCerStatisticsGenderPageComponent } from './gender/ngxa-cer-statistics-gender-page.component';\nimport { NgxaCerStatisticsPeriodePageComponent } from './periode/ngxa-cer-statistics-periode-page.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: NgxaStatisticsComponent,\n  canActivateChild: [AuthGuardChildService],\n  children: [\n    {\n      path: 'area',\n      component: NgxaCerStatisticsAreaPageComponent,\n      data: {\n        code: '#STATISTICS-AREA-PAGE',\n      },\n    },\n    {\n      path: 'gender',\n      component: NgxaCerStatisticsGenderPageComponent,\n      data: {\n        code: '#STATISTICS-GENDER-PAGE',\n      },\n    },\n    {\n      path: 'periode',\n      component: NgxaCerStatisticsPeriodePageComponent,\n      data: {\n        code: '#STATISTICS-PERIODE-PAGE',\n      },\n    },\n  ],\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NgxaCerStatisticsRoutingModule {\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NbCardModule } from '@nebular/theme';\nimport { NgxaChartsModule, NgxaBaseModule } from '@xaphira/ngxa-common';\nimport { NgxaThemeModule } from '@xaphira/ngxa-theme';\nimport { NgxaCerStatisticsRoutingModule } from './ngxa-cer-statistics-routing.module';\nimport { NgxaStatisticsComponent } from './ngxa-statistics.component';\nimport { NgxaCerStatisticsAreaPageComponent } from './area/ngxa-cer-statistics-area-page.component';\nimport { NgxaCerStatisticsGenderPageComponent } from './gender/ngxa-cer-statistics-gender-page.component';\nimport { NgxaCerStatisticsPeriodePageComponent } from './periode/ngxa-cer-statistics-periode-page.component';\n\nconst components = [\n  NgxaStatisticsComponent,\n  NgxaCerStatisticsAreaPageComponent,\n  NgxaCerStatisticsGenderPageComponent,\n  NgxaCerStatisticsPeriodePageComponent,\n];\n\nconst modules = [\n  FormsModule,\n  ReactiveFormsModule,\n  NbCardModule,\n  NgxaThemeModule,\n  NgxaBaseModule,\n  NgxaChartsModule,\n  NgxaCerStatisticsRoutingModule,\n];\n\nconst providers = [\n];\n\nconst entryComponents = [\n];\n\n@NgModule({\n  imports: [\n    ...modules,\n  ],\n  declarations: [\n    ...components,\n  ],\n  providers: [\n    ...providers,\n  ],\n  entryComponents: [\n    ...entryComponents,\n  ],\n})\nexport class NgxaCerStatisticsModule { }\n"]}
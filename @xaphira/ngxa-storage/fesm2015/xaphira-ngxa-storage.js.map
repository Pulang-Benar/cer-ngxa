{"version":3,"file":"xaphira-ngxa-storage.js","sources":["ng://@xaphira/ngxa-storage/lib/services/storage-mask.service.ts","ng://@xaphira/ngxa-storage/lib/providers/storage.provider.ts","ng://@xaphira/ngxa-storage/lib/ngxa-storage.module.ts","ng://@xaphira/ngxa-storage/lib/services/indexed-db.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { EncryptionService } from '@xaphira/utils';\nimport { SecurityResourceModel, OAUTH_INFO } from '@xaphira/shared';\nimport { StorageFactoryService } from './storage-factory.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class StorageMaskService implements StorageFactoryService {\n\n    constructor(protected enc: EncryptionService,\n        @Inject(OAUTH_INFO) private oauthResource: SecurityResourceModel) {}\n\n    public getSessionStorageEnc(key: string): string {\n        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);\n        if (sessionStorage.getItem(keyEncrypted))\n            return this.enc.decryptAES(this.oauthResource['aes_key'], sessionStorage.getItem(keyEncrypted));\n        else\n            return null;\n    }\n\n    public setSessionStorageEnc(key: string, value: string): void {\n        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);\n        const valueEncrypted = this.enc.encryptAES(this.oauthResource['aes_key'], value);\n        sessionStorage.setItem(keyEncrypted, valueEncrypted);\n    }\n\n    public removeSessionStorageEnc(key: string): void {\n        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);\n        sessionStorage.removeItem(keyEncrypted);\n    }\n\n    public getLocalStorageEnc(key: string): string {\n        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);\n        if (localStorage.getItem(keyEncrypted))\n            return this.enc.decryptAES(this.oauthResource['aes_key'], localStorage.getItem(keyEncrypted));\n        else\n            return null;\n    }\n\n    public setLocalStorageEnc(key: string, value: string): void {\n        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);\n        const valueEncrypted = this.enc.encryptAES(this.oauthResource['aes_key'], value);\n        localStorage.setItem(keyEncrypted, valueEncrypted);\n    }\n\n    public removeLocalStorageEnc(key: string): void {\n        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);\n        localStorage.removeItem(keyEncrypted);\n    }\n\n    public getSessionStorage(key: string): string {\n        return (key) ? sessionStorage.getItem(key) : null;\n    }\n\n    public setSessionStorage(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    public removeSessionStorage(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    public getLocalStorage(key: string): string {\n        return (key) ? localStorage.getItem(key) : null;\n    }\n\n    public setLocalStorage(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    public removeLocalStorage(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    public clearSessionStorage(): void {\n        sessionStorage.clear();\n    }\n\n    public clearLocalStorage(): void {\n        localStorage.clear();\n    }\n\n    public clearAll(): void {\n        sessionStorage.clear();\n        localStorage.clear();\n    }\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { StorageFactoryService } from '../services/storage-factory.service';\n\nexport const STORAGE_SERVICE: InjectionToken<StorageFactoryService> =\nnew InjectionToken<StorageFactoryService>('Storage Factory Service');\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StorageMaskService } from './services/storage-mask.service';\nimport { STORAGE_SERVICE } from './providers/storage.provider';\n\nexport const STORAGE_PROVIDERS = [\n  { provide: STORAGE_SERVICE, useClass: StorageMaskService},\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  exports: [],\n  declarations: [],\n})\nexport class NgxaStorageModule {\n\n  static forRoot(): ModuleWithProviders {\n    return <ModuleWithProviders>{\n      ngModule: NgxaStorageModule,\n      providers: [\n        ...STORAGE_PROVIDERS,\n      ],\n    };\n  }\n}\n","import { Injector } from '@angular/core';\nimport { IDBPDatabase, StoreValue, StoreKey } from 'idb';\nimport * as idb from 'idb';\nimport { EncryptionService } from '@xaphira/utils';\nimport { OAUTH_INFO, SecurityResourceModel } from '@xaphira/shared';\nimport { Observable, Subject } from 'rxjs';\n\nexport class IndexedDBService<T> {\n  protected $dbPromise: Promise<IDBPDatabase<T>>;\n  protected enc: EncryptionService;\n  protected oauthResource: SecurityResourceModel;\n\n  constructor(injector: Injector, dbname: string, version: number, private storeName: any) {\n    this.openSessionIDB(dbname, version);\n    this.enc = injector.get(EncryptionService);\n    this.oauthResource = injector.get(OAUTH_INFO);\n  }\n\n  public async openSessionIDB(dbname: string, version: number): Promise<IDBPDatabase<T>> {\n    return this.$dbPromise = idb.openDB<T>(dbname, version);\n  }\n\n  public getAllOf(): Observable<any> {\n    const result$: Subject<any> = new Subject<any>();\n    this.getAllVal(this.storeName).then((value: any) => {\n      result$.next(value);\n    });\n    return result$.asObservable();\n  }\n  public getOf(key): Observable<any> {\n    const result$: Subject<any> = new Subject<any>();\n    this.getKeyVal(key, this.storeName).then((value: any) => {\n      result$.next(value);\n    });\n    return result$.asObservable();\n  }\n  public putOf(key, val): Observable<any> {\n    const result$: Subject<any> = new Subject<any>();\n    this.putKeyVal(key, val, this.storeName).then((value: any) => {\n      result$.next(value);\n    });\n    return result$.asObservable();\n  }\n  public removeOf(key): Observable<void> {\n    const result$: Subject<any> = new Subject<any>();\n    this.removeKeyVal(key, this.storeName).then((value: any) => {\n      result$.next(value);\n    });\n    return result$.asObservable();\n  }\n\n  public getAll(): Promise<StoreValue<T, any>[]> {\n    return this.getAllVal(this.storeName);\n  }\n  public get(key): Promise<StoreValue<T, any>> {\n    return this.getKeyVal(this.storeName, key);\n  }\n  public put(key, val): Promise<StoreKey<T, any>> {\n    return this.putKeyVal(this.storeName, key, val);\n  }\n  public remove(key): Promise<void> {\n    return this.removeKeyVal(this.storeName, key);\n  }\n  public clearAll(): Promise<void> {\n    return this.clearAllKeyVal(this.storeName);\n  }\n  public keys(): Promise<StoreKey<T, any>[]> {\n    return this.keysKeyVal(this.storeName);\n  }\n\n  public async getAllVal(storeName: any): Promise<StoreValue<T, any>[]> {\n    return (await this.$dbPromise).getAll(storeName);\n  }\n  public async getKeyVal(storeName: any, key): Promise<StoreValue<T, any>> {\n    return (await this.$dbPromise).get(storeName, key);\n  }\n  public async putKeyVal(storeName: any, key, val): Promise<StoreKey<T, any>> {\n    return (await this.$dbPromise).put(storeName, val, key);\n  }\n  public async removeKeyVal(storeName: any, key): Promise<void> {\n    return (await this.$dbPromise).delete(storeName, key);\n  }\n  public async clearAllKeyVal(storeName: any): Promise<void> {\n    return (await this.$dbPromise).clear(storeName);\n  }\n  public async keysKeyVal(storeName: any): Promise<StoreKey<T, any>[]> {\n    return (await this.$dbPromise).getAllKeys(storeName);\n  }\n\n  public async addArticle(storeName: any, value: any): Promise<StoreKey<T, any>> {\n      return (await this.$dbPromise).add(storeName, value);\n  }\n  public async addAllArticle(storeName: any, values: any[]): Promise<void> {\n      const tx = (await this.$dbPromise).transaction(storeName, 'readwrite');\n      values.forEach((value: any) => {\n          tx.store.add(value);\n      });\n      return await tx.done;\n  }\n}\n"],"names":["idb.openDB"],"mappings":"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"}